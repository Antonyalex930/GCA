dsa two sum 

package dsa;


	import java.util.Arrays;

	public class TwoSums {   // 3 Create a class called TwoSum.
	    public int[] twoSum(int[] nums, int target) {  // 2 that add up to the target sum.
	                                                  // 4 Define a method named twoSum that takes an array of integers (nums) and a 

	        for (int i = 0; i < nums.length - 1; i++) {
	            for (int j = i + 1; j < nums.length; j++) {
	                if (nums[i] + nums[j] == target) {    // 5 target sum (target) as parameters and returns an array of two integers

	                    return new int[]{i, j};   // 6 Inside the twoSum method, initialize two nested loops. The outer loop will
	                                              // 7 iterate from i = 0 to nums.length - 1.
	                                              //8  Inside the outer loop, initialize the inner loop. It will iterate from j = i
	                                              //9  + 1 to nums.length - 1.
	                                             //10  Within the inner loop, check if the sum of nums[i] and nums[j] equals the
	                                             //11  target sum:
	                                             //12  If the sum is equal to the target, return a new array with i and j a selements.
	                }
	            }
	        }
	        throw new IllegalArgumentException("No two numbers add up to the target sum.");
	        //13 If no pair is found within the loops, throw an IllegalArgumentException with
	          //14 an appropriate error message indicating that no two numbers add up to the target sum.
	    }

	    public static void main(String[] args) {   // In the main method, create an instance of the TwoSum class.
	        TwoSum twoSum = new TwoSum();
	        int[] nums = {2, 7, 11, 15};  // 1 Given an array of integers and a target sum, find two numbers in the array
	                                      // Define an array of integers (nums) and assign values to it.
	        int target = 9;               // Define a target sum (target).
	        int[] result = twoSum.twoSum(nums, target); // Call the twoSum method with the nums and target as arguments, and store the
	        System.out.println("Indices of the two numbers that add up to the target sum:");
	        System.out.println(Arrays.toString(result));


	// result in an array (result).
	// Print the elements of the result array to display the indices of the two
	// numbers that add up to the target sum.
	    }
	}

	
}



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
water trapper 

// Given an array of non-negative integers representing an elevation map,
// compute how much water it can trap after raining.

// Define a method called trapWater that takes an array of non-negative integers
// (heights) as input and returns an integer representing the total amount of
// water trapped.
// Inside the trapWater method, initialize two variables: totalWater to keep
// track of the accumulated water and leftMax and rightMax to store the maximum
// heights on the left and right sides, respectively. Initialize them to 0.
// Define two pointers, left and right, pointing to the start and end of the
// heights array.
// While left is less than or equal to right, do the following:
// Check if heights[left] is less than or equal to heights[right]:
// If true, compare heights[left] with leftMax:
// If heights[left] is greater than leftMax, update leftMax to heights[left].
// If heights[left] is less than or equal to leftMax, calculate the water
// trapped at the current position (left) as leftMax - heights[left] and add it
// to totalWater.
// Increment left by 1.
// If false, do the same steps as above, but with heights[right] instead of
// heights[left].
// Finally, return the totalWater calculated.

public class WaterTrapper {
    public int trapWater(int[] heights) {
        int totalWater = 0;
        int leftMax = 0;
        int rightMax = 0;
        int left = 0;
        int right = heights.length - 1;

        while (left <= right) {
            if (heights[left] <= heights[right]) {
                if (heights[left] > leftMax) {
                    leftMax = heights[left];
                } else {
                    totalWater += leftMax - heights[left];
                }
                left++;
            } else {
                if (heights[right] > rightMax) {
                    rightMax = heights[right];
                } else {
                    totalWater += rightMax - heights[right];
                }
                right--;
            }
        }

        return totalWater;
    }

    public static void main(String[] args) {
        WaterTrapper waterTrapper = new WaterTrapper();
        int[] heights = {0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1};
        int totalWater = waterTrapper.trapWater(heights);
        System.out.println("Total amount of water trapped: " + totalWater);
    }
}

